name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    concurrency:
      group: ${{ github.head_ref || github.ref_name }}-${{ github.workflow }}-${{ join(matrix.os, '-') }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
      cancel-in-progress: true

    strategy:
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-12, macos-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
#        include:
            # Windows: cl
#          - os: windows-latest
#            c_compiler: cl
#            cpp_compiler: cl
#            # Ubuntu: gcc, clang
#          - os: ubuntu-latest
#            c_compiler: gcc
#            cpp_compiler: g++
#          - os: ubuntu-latest
#            c_compiler: clang
#            cpp_compiler: clang++
#            # macOS: clang(Apple clang)
#          - os: macos-12
#            c_compiler: clang
#            cpp_compiler: clang++
#          - os: macos-latest
#            c_compiler: clang
#            cpp_compiler: clang++

#          - c_compiler: gcc
#            version: -9
#          - c_compiler: gcc
#            version: -10
#          - c_compiler: gcc
#            version: -11

        exclude:
            # Exclude on Windows: gcc, clang
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
            # Exclude on Ubuntu: cl
          - os: ubuntu-latest
            c_compiler: cl
            # Exclude on macOS: cl, gcc
          - os: macos-12
            c_compiler: cl
          - os: macos-12
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      env:
        CXX: ${{ matrix.cpp_compiler }}${{ matrix.version }}
        CC: ${{ matrix.c_compiler }}${{ matrix.version }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ env.CXX }}
        -DCMAKE_C_COMPILER=${{ env.CC }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DPREVIEW_TEST=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
